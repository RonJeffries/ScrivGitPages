{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf400
{\fonttbl\f0\fswiss\fcharset0 ArialMT;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\pard\sl288\slmult1\pardirnatural\partightenfactor0

\f0\fs26 \cf0 I think the remaining priorities for this little effort are the table of contents, and setting it up to be fully automated. By \'93fully\'94, I mean that issuing a compile should automatically run the Ruby script that creates our individual files, plugs in the links, and creates the table of contents. I probably will not go so far as to automate the git commit and push to GitHub. We\'92ll see.\
\
Since creating the table of contents requires some file-mangling, I think I\'92ll start with that before automation, so that I don\'92t have to wipe out the files that are currently up on GitHub. They\'92re under Git, so I could get them back, but let\'92s just not destroy them. So, table of contents first.\
\
The approximate plan is to replace my hand-made ToC with a marker, probably \\<\'97TOC\'97>, in the source file. Then the Ruby script can just split the index file on the marker, write out the first chunk, write out the ToC, then write out the second chunk. Should be really \'93easy\'94. \
\
I guess first, I\'92ll make the ToC edit and recompile. For my own convenience, I\'92ll comment out the existing one, in case everything goes wrong. \'85 OK, that\'92s done.\
\
The main loops of the Ruby script look like this:\
\
```ruby\
input = ARGF.read\
chunks = input.split(SPLIT_MARKER)\
reference_chunk = chunks.delete_at(-1)\
filenumber = 0\
chunks.each do | chunk |\
  title = chunk.split("\\n")[0]\
  Titles[filenumber] = title[2..-3]\
  filenumber += 1\
end\
filenumber = 0\
chunks.each do |chunk|\
  write_file(chunk, reference_chunk, filenumber, chunks.length - 1) unless chunk.length < 1\
  filenumber += 1\
end\
```\
\
(We should factor out those two loops, by the way, calling one `get_titles` and the other `write_files` or something. Maybe later.) Anyway, we\'92ve already pulled one chunk off the back of the list before proceeding. What if we pull the one off the front and process it? We could either write it out separately, or we could assemble a new chunk, with the ToC in it, and put it back. I\'92m inclined to the latter.\
\
Why? Two reasons. First, I expect it involves less changing of existing code. Second, I\'92d have to duplicate at least the call to write_file, and possibly even create a new version of that function. I could be wrong. We\'92ll see what happens as I go along. First things first, I\'92ll pull out the chunk and edit it trivially and put it back.\
\
Here\'92s what I\'92ve got now, the main and the `add_toc` function:\
\
```ruby\
input = ARGF.read\
chunks = input.split(SPLIT_MARKER)\
reference_chunk = chunks.delete_at(-1)\
toc_chunk = chunks.delete_at(0)\
updated_toc = add_toc(toc_chunk)\
chunks.insert(0, updated_toc)\
filenumber = 0\
chunks.each do | chunk |\
  title = chunk.split("\\n")[0]\
  Titles[filenumber] = title[2..-3]\
  filenumber += 1\
end\
filenumber = 0\
chunks.each do |chunk|\
  write_file(chunk, reference_chunk, filenumber, chunks.length - 1) unless chunk.length < 1\
  filenumber += 1\
end\
\
def add_toc(chunk)\
  halves = chunk.split(TOC_MARKER)\
  puts "halves length %d" % halves.length\
  return chunk if halves.length != 2\
  return halves[0] + "\\nHERE IT IS\\n" + halves[1]\
end\
```\
\
That\'92s doing exactly what I expected, removing my TOC flag, and inserting \'93HERE IT IS\'94 where the ToC should go. There was one little glitch: when I first ran it, the add_toc function wasn\'92t finding the flag. Turns out, Scrivener, or MacOS in their zeal to be helpful, had converted -- to \'97, the em-dash. Thanks, doll. \
\
Now all I have to do is format the ToC and insert it. Life is good.\
\
Silly boy! You can\'92t put the real ToC in until *after* you\'92ve created the Titles Hash. Here\'92s what I\'92ll try now.\
\
```ruby\
input = ARGF.read\
chunks = input.split(SPLIT_MARKER)\
reference_chunk = chunks.delete_at(-1)\
filenumber = 0\
chunks.each do | chunk |\
  title = chunk.split("\\n")[0]\
  Titles[filenumber] = title[2..-3]\
  filenumber += 1\
end\
toc_chunk = chunks.delete_at(0)\
updated_toc = add_toc(toc_chunk)\
chunks.insert(0, updated_toc)\
filenumber = 0\
chunks.each do |chunk|\
  write_file(chunk, reference_chunk, filenumber, chunks.length - 1) unless chunk.length < 1\
  filenumber += 1\
end\
```\
\
That works! Here\'92s what add_toc looks like now:\
\
```ruby\
def add_toc(chunk)\
  halves = chunk.split(TOC_MARKER)\
  puts "halves length %d" % halves.length\
  return chunk if halves.length != 2\
  return halves[0] + table_of_contents + halves[1]\
end\
\
def table_of_contents\
  toc = ""\
  Titles.each_pair do | number, title |\
    toc += "* [" + title + "](" + make_file_name(number) + ")\\n"  \
  end\
  return toc\
end\
```\
\
That could be cleaner. I\'92ll do a little cleanup and then push this baby.\
\
First, I improve this:\
\
`toc += "* [" + title + "](" + make_file_name(number) + \'93)\\n\'94`\
\
to this:\
\
`toc += "* [%s](%s)\\n" % [title, make_file_name(number)] `\
\
That\'92s a bit more like Ruby. Now I want to factor out all the loops and other chunks, using the Composed Method pattern, which essentially asks that a method either do things, or call things, but not both. \
\
That goes swimmingly (which, I gather from extensive reading, means \'93well\'94), and now the main looks like this:\
\
```ruby\
input = ARGF.read\
chunks = input.split(SPLIT_MARKER)\
reference_chunk = chunks.delete_at(-1)\
record_titles(chunks)\
update_table_of_contents(chunks)\
write_files(chunks, reference_chunk)\
```\
\
That\'92s nearly good, in my opinion. Below is the whole script, in case you want to read it or use it as it stands. I\'92m going to go remove the saved ToC from the top of the booklet, generate, and ship.\
\
Next step, maybe: work on running the script right out of Scrivener. I think this is nearly ready to go.\
\
```ruby\
#!/usr/bin/env ruby -wU\
require 'tempfile'\
\
SPLIT_MARKER = "----\\n\\n"\
TOC_MARKER = "<!--TOC-->\\n"\
Titles = \{\}\
\
def add_toc(chunk)\
  halves = chunk.split(TOC_MARKER)\
  puts "halves length %d" % halves.length\
  return chunk if halves.length != 2\
  return halves[0] + table_of_contents + halves[1]\
end\
\
def make_file_name(filenumber)\
  return "index.md" if filenumber == 0\
  return sprintf("%02d.md", filenumber)\
end\
\
def make_link_line(filenumber, max_length)\
  link = ""\
  # if ( filenumber == 1 ) \
    # link += "[Prev](index.html) "\
  if filenumber > 0\
    link += "[%s](%02d.html) | " % [Titles[filenumber - 1], filenumber - 1]\
  end\
  link += "[Top](index.html) | "\
  link += "[%s](%02d.html)" % [Titles[filenumber + 1], filenumber + 1] unless filenumber >= max_length\
  return link\
end\
\
def record_titles(chunks)\
  filenumber = 0\
  chunks.each do | chunk |\
    title = chunk.split("\\n")[0]\
    Titles[filenumber] = title[2..-3]\
    filenumber += 1\
  end\
end\
\
def table_of_contents\
  toc = ""\
  Titles.each_pair do | number, title |\
    # toc += "* [" + title + "](" + make_file_name(number) + ")\\n" \
    toc += "* [%s](%s)\\n" % [title, make_file_name(number)] \
  end\
  return toc\
end\
\
def update_table_of_contents(chunks)\
  toc_chunk = chunks.delete_at(0)\
  updated_toc = add_toc(toc_chunk)\
  chunks.insert(0, updated_toc)\
end\
\
def write_file(chunk, reference_chunk, filenumber, max_length)\
  filename = make_file_name(filenumber)\
  title = Titles[filenumber]\
  puts filename + ": " + title\
  tf = File.new(filename, "w")\
  tf.print chunk\
  tf.puts\
  tf.puts\
  tf.puts make_link_line(filenumber, max_length)\
  tf.puts\
  tf.puts\
  tf.print reference_chunk\
  tf.puts\
  tf.puts\
  tf.close\
end\
\
def write_files(chunks, reference_chunk)\
  filenumber = 0\
  chunks.each do |chunk|\
    write_file(chunk, reference_chunk, filenumber, chunks.length - 1) unless chunk.length < 1\
    filenumber += 1\
  end\
end\
\
input = ARGF.read\
chunks = input.split(SPLIT_MARKER)\
reference_chunk = chunks.delete_at(-1)\
record_titles(chunks)\
update_table_of_contents(chunks)\
write_files(chunks, reference_chunk)\
```}